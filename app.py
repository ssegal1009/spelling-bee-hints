from flask import Flask, render_template, jsonify, request
from nltk.corpus import words
import nltk


app = Flask(__name__)



english_words = words.words()

def getWords(bee):
    """Argument: bee, a string of 7 characters representing the 7 letters of today's spelling bee.
       Returns a list of the possible pangrams of those 7 letters
    """
    alphabet = set('abcdefghijklmnopqrstuvwxyz') #set of the english alph
    beeLetters = set(bee)
    remAlph = str(alphabet - beeLetters) #find remaining letters of the english alphabet

    allWords = [] #empty list to eventually store final pangrams in

    for word in english_words: #loop through NLKT provided eng dictionary
        countBeeLetters = 0#count of instances of the bee letters within instance of word
        skipThisWord = False #skip current word if any other letter in remAlph is in it
        for i in range(len(remAlph)):
            if str(remAlph)[i] in word: #if any other letter in word
                skipThisWord = True #skip!
                break
        if skipThisWord == True: #skip the word, move on to next word in english_words
            continue

        for i in range(7):#check if bee letters are in word
            if bee[i] in word:
                countBeeLetters +=1
        if countBeeLetters == 7: #once you reach a count of seven bee letters, you have a pangram, so add current word to the final list
            allWords += [word]
    return allWords

def isCompoundWord(bee):
    """
    Checks to see if the pangram is a compound word
    Returns bool isCompound 
    """
    pangram = bee[0] 
    isCompound = False #initialize isCompound

    for i in range(len(pangram)):#loops through letters in the pangram 
        if (pangram[0:i] in english_words) and (pangram[i::] in english_words):#iterates through the pangram, comparing different sections to locate two separate words if they exist
            isCompound = True
    if isCompound:
        return "Yes, it's a compound!!"
    else:
        return "No"

def letterCount(bee):
    """Returns a dictionary of the count of each letter in the pangram
    """
    pangram = bee[0] 
    letterCount = {}
    for letter in pangram:
        if letter in letterCount:
            letterCount[letter] += 1
        else:
            letterCount[letter] = 1
    return str(letterCount)


def firstLetter(bee):
    """returns the first letter of the first pangram in the list of pangrams generated by getWords(bee)
    """
    firstPangram = bee[0]
    return "The first letter of the pangram is: " + firstPangram[0]

# Sample hint dictionary: is it needed?

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/get_hint', methods=['POST'])
def get_hint():
    data = request.json
    bee = data.get('bee', '')  # Get the bee string from user input
    pangrams = getWords(bee)  # Get pangrams based on the bee string
    hint = firstLetter(pangrams)  # Generate the hint based on the pangrams
    return jsonify({"hint": hint})

@app.route('/get_compound', methods=['POST'])
def get_compound():
    data = request.json
    bee = data.get('bee', '')  # Get the bee string from user input
    pangrams = getWords(bee)  # Get pangrams based on the bee string
    hint = isCompoundWord(pangrams)  # Generate the hint based on the pangrams
    return jsonify({"hint": hint})

@app.route('/get_letterCount', methods=['POST'])
def get_letterCount():
    data = request.json
    bee = data.get('bee', '')  # Get the bee string from user input
    pangrams = getWords(bee)  # Get pangrams based on the bee string
    hint = letterCount(pangrams)  # Generate the hint based on the pangrams
    return jsonify({"hint": hint})


if __name__ == '__main__':
    app.run(debug=True)
